/**
 ******************************************************************************
 * @author Paolo Sassi
 * @date 21 January 2016
 * @brief Erika Enterprise configuration file.
 ******************************************************************************
 * @attention
 *
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2013  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation,
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 ******************************************************************************
 */

CPU mySystem {

	OS myOs {
		EE_OPT = "DEBUG";
		
		CPU_DATA = CORTEX_MX {
			MODEL = M4;
			APP_SRC = "code.c";
			APP_SRC = "Touch.c";
			APP_SRC = "STMPE811QTR.c";
			APP_SRC = "i2c_lib.c";
			APP_SRC = "aux.c";
			COMPILER_TYPE = GNU;
			MULTI_STACK = TRUE;
		};
		EE_OPT = "__USE_SYSTICK__";

		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};

		EE_OPT = "__ADD_LIBS__";
		
		LIB = ENABLE { NAME = "ST_CMSIS"; };
		
		LIB = ENABLE { NAME = "STM32F4XX_SPD"; 
			STM32F4XX_SPD = ENABLE {
				USEI2C = TRUE;
				USEDMA = TRUE;
			};
		};
		
		LIB = ENABLE { NAME = "STM32F4_DISCOVERY";
			STM32F4_DISCOVERY = ENABLE {
				USELCD = TRUE;
				USELEDS = TRUE;
				};
		};
		
		STATUS = STANDARD;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;

		KERNEL_TYPE = ECC1;

	};
	
	COUNTER myCounter {
		MINCYCLE = 4;
		MAXALLOWEDVALUE = 0xFFFF ;
		TICKSPERBASE = 1;
	};
	
		
	EVENT sleep_event {
		MASK = AUTO; 
	};

	ALARM AlarmGR {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = GetRanging; };
	};
	
	ALARM AlarmSR {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = StartRanging; };
	};
	
	ALARM AlarmLCD {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = LCDController; };
	};
	
	ALARM AlarmLCDsleep {
		COUNTER = myCounter;
		ACTION = SETEVENT { 
			TASK = LCDController;
			EVENT = sleep_event;
		};
	};
	
	TASK LCDController {
		PRIORITY = 0x01;
		AUTOSTART = FALSE;
		STACK = PRIVATE {
			SYS_SIZE = 1024;
		};
		ACTIVATION = 1;
		SCHEDULE = FULL;
		EVENT = sleep_event;
	};
	
	TASK GetRanging {
		PRIORITY = 0x02;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK StartRanging {
		PRIORITY = 0x03;   /* High priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};

	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 1;
	};

};
